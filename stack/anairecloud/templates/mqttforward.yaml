apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqttforward
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqttforward
  template:
    metadata:
      labels:
        app: mqttforward
    spec:
      containers:
        - name: mqttforward
          image: python
          command: ["/bin/bash"]
          args: ["-c","/config/run.sh"]
          volumeMounts:
            - name: mqttforward
              mountPath: /config/
          resources:
            {{- toYaml .Values.resources.mqttforward | nindent 12 }}
      volumes:
        - name: mqttforward
          configMap:
            name: mqttforward
            defaultMode: 0777
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mqttforward
data:
  run.sh: |
    #!/bin/bash
    pip install paho-mqtt
    pip install requests
    pip install pyyaml
    while ((1))
    do 
      python /config/pushgateway_forwarder.py pushgateway-np mqtt-np
      echo "ERROR: Script failed"
    done
    
  pushgateway_forwarder.py: |
    #!/usr/bin/env python
    import sys
    import requests
    from paho.mqtt import client as mqtt
    import yaml

    HEADERS = {'X-Requested-With': 'Python requests', 'Content-type': 'text/xml'}


    def pushdata(DATA, URL):
      try:
        #print(DATA)
        response = requests.post(url=URL, data=DATA,headers=HEADERS)
        print(response.content)
      except requests.exceptions.RequestException as e:  # This is the correct syntax
        raise SystemExit(e)

    def on_connect(client, userdata, flags, rc):
        # connect mqtt broker
        client.subscribe([("#", 0)])
        
    def on_message(client, userdata, msg):
        payload = msg.payload.decode("utf-8")
        payload = yaml.safe_load(msg.payload.decode("utf-8"))
        device_ids = payload.pop('end_device_ids', None)
        if device_ids:
            device_id = str(device_ids["device_id"])
            if 'uplink_message' in payload:
                decoded_payload = payload["uplink_message"]["decoded_payload"]

                #Get and forward data from humidity sensor
                if 'temp_SOIL' in decoded_payload:
                    temp_SOIL = str(decoded_payload["temp_SOIL"]).split(' ')[0]
                    conduct_SOIL = str(decoded_payload["conduct_SOIL"]).split(' ')[0]
                    Bat = str(decoded_payload["Bat"]).split(' ')[0]
                    water_SOIL = str(decoded_payload["water_SOIL"]).split(' ')[0]

                    msg = 'temp_SOIL ' + str(temp_SOIL) + '\n' + \
                          'conduct_SOIL ' + str(conduct_SOIL) + '\n' + \
                          'Bat_SOIL ' + str(Bat) + '\n' + \
                          'water_SOIL ' + str(water_SOIL) + '\n'
                    URL  = 'http://' + sys.argv[1] + ':9091/metrics/job/' + device_id
                    pushdata(msg, URL)
        else:
            print( 'ERROR: Malformed message' + str(payload))
        

    def main():
      if (len(sys.argv) != 5):
          print('Usage: '+sys.argv[0]+' <pushgateway IP> <mqttbroker IP> <user> <password>. Found '+len(sys.argv)+' arguments.')
          exit()
  
      client = mqtt.Client()
      client.username_pw_set(sys.argv[3], sys.argv[4])
      client.connect(sys.argv[2], 1883)
      client.on_connect = on_connect
      client.on_message = on_message
      client.loop_forever()

    if __name__ == "__main__":
        main()



